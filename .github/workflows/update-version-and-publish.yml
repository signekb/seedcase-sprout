name: Update version

on:
  push:
    branches:
      - main

jobs:
  update-version-and-changelog:
    if: "!startsWith(github.event.head_commit.message, 'build(version): ')"
    runs-on: ubuntu-latest
    name: "Update project's version and changelog"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Only need the last commit from the repo.
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - id: cz
        name: Update version and changelog
        uses: commitizen-tools/commitizen-action@5b0848cd060263e24602d1eba03710e056ef7711 # 0.24.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog: true

      - name: Create GitHub release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          generate_release_notes: true
          # env variable containing the new version, created by the Commitizen action
          tag_name : ${{ env.REVISION }}

  build:
    name: Build distribution 📦
    needs:
      - update-version-and-changelog
    runs-on: ubuntu-latest
    steps:
      # For this, we need more than the last commit (as above)
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
    - name: Install Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
          python-version-file: "pyproject.toml"
    # Build dists from source and store them in the dist/ directory.
    - name: Install uv
      uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v6.3.0
    - name: Build a binary wheel and a source tarball and store them in dist/
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # publish-to-pypi:
  #   name: >-
  #     Publish Python 🐍 distribution 📦 to PyPI
  #   # Only publish to PyPI on tag pushes.
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs:
  #   - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/seedcase-sprout
  #   permissions:
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing
  #   steps:
  #       - name: Download all the dists
  #         uses: actions/download-artifact@v4
  #         with:
  #           name: python-package-distributions
  #           path: dist/
  #       - name: Publish distribution 📦 to PyPI
  #         uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/seedcase-sprout
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # No need for manual approvals for testpypi, since it's designed to run on
      # each commit to main and is often used to indicate a healthy release publishing pipeline.
      with:
        repository-url: https://test.pypi.org/legacy/
